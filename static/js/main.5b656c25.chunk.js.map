{"version":3,"sources":["index.js"],"names":["appointmentList","Appointment","props","state","title","date","time","location","description","isEditing","handleChange","bind","editAction","cancelAction","event","this","setState","target","name","value","id","parseInt","editAppointment","cancelAppointment","className","type","onChange","onClick","React","Component","AppointmentList","appointments","items","map","item","key","AppointmentForm","onSubmit","preventDefault","newTitle","refs","titleValue","newDate","dateValue","newTime","timeValue","newLocation","locationValue","newDescription","descriptionValue","addItem","form","reset","ref","placeholder","Scheduler","addAppointment","appointment","unshift","length","itemId","splice","initList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b656c25.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Create a website that allows you to:\n//  schedule personal appointments with a date, time, location, and description\n//  see a list of appointments\n//  edit appointments\n//  cancel appointments\n\n// Additional guidelines for the challenge:\n//  React for the view layer\n//  You can stop after 3 hours, even if it is incomplete\n//  You do not need backend services for persistence, volatile storage is ok for this\n// challenge\n\n// Please share your code via a Github repository and include instructions for running the\n// application in the README.md file.\n\nlet appointmentList = [];\n\nclass Appointment extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: this.props.title,\n            date: this.props.date,\n            time: this.props.time,\n            location: this.props.location,\n            description: this.props.description,\n            isEditing: false\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.editAction = this.editAction.bind(this);\n        this.cancelAction = this.cancelAction.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    editAction() {\n        let id = parseInt(this.props.id);\n\n        this.setState({\n            isEditing: !this.state.isEditing,\n            title: this.props.title,\n            date: this.props.date,\n            time: this.props.time,\n            location: this.props.location,\n            description: this.props.description,\n        });\n\n        this.props.editAppointment(id, {\n            title: this.state.title,\n            date: this.state.date,\n            time: this.state.time,\n            location: this.state.location,\n            description: this.state.description,\n        });\n    }\n\n    cancelAction() {\n        let id = parseInt(this.props.id);\n        this.props.cancelAppointment(id);\n    }\n\n    render() {\n        return (\n            <div className=\"appointmentBlock\">\n                <div className=\"appointmentLine\">\n                    <span className=\"appointmentKey\">Title</span> {this.state.isEditing ? '' :\n                    <span className=\"appointmentValue\">{this.props.title}</span>}\n                    {this.state.isEditing ?\n                        <input type=\"text\"\n                               name=\"title\"\n                               value={this.state.title}\n                               onChange={this.handleChange}\n                        />\n                        : ''}\n                </div>\n                <div className=\"appointmentLine\">\n                    <span className=\"appointmentKey\">Date</span> {this.state.isEditing ? '' :\n                    <span className=\"appointmentValue\">{this.props.date}</span>}\n                    {this.state.isEditing ?\n                        <input type=\"date\"\n                               name=\"date\"\n                               value={this.state.date}\n                               onChange={this.handleChange}\n                        />\n                        : ''}\n                </div>\n                <div className=\"appointmentLine\">\n                    <span className=\"appointmentKey\">Time</span> {this.state.isEditing ? '' :\n                    <span className=\"appointmentValue\">{this.props.time}</span>}\n                    {this.state.isEditing ?\n                        <input type=\"time\"\n                               name=\"time\"\n                               value={this.state.time}\n                               onChange={this.handleChange}\n                        />\n                        : ''}\n                </div>\n                <div className=\"appointmentLine\">\n                    <span className=\"appointmentKey\">Location</span> {this.state.isEditing ? '' :\n                    <span className=\"appointmentValue\">{this.props.location}</span>}\n                    {this.state.isEditing ?\n                        <input type=\"text\"\n                               name=\"location\"\n                               value={this.state.location}\n                               onChange={this.handleChange}\n                        />\n                        : ''}\n                </div>\n                <div className=\"appointmentLine\">\n                    <span className=\"appointmentKey\">Description</span> {this.state.isEditing ? '' :\n                    <span>{this.props.description}</span>}\n                    {this.state.isEditing ?\n                        <input type=\"text\"\n                               name=\"description\"\n                               value={this.state.description}\n                               onChange={this.handleChange}\n                        />\n                        : ''}\n                </div>\n                <div className=\"appointmentActions\">\n                    <button type=\"button\"\n                            onClick={this.editAction}>{this.state.isEditing ? 'save appointment' : 'edit appointment'}</button>\n                    <button type=\"button\" onClick={this.cancelAction}>cancel appointment</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass AppointmentList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let appointments = this.props.items.map((item, id) => {\n            return (\n                <Appointment key={id}\n                             title={item.title}\n                             date={item.date}\n                             time={item.time}\n                             location={item.location}\n                             description={item.description}\n                             id={id}\n                             editAppointment={this.props.editAppointment}\n                             cancelAppointment={this.props.cancelAppointment}\n                />\n            );\n        });\n        return (\n            <div>\n                {appointments}\n            </div>\n        );\n    }\n}\n\nclass AppointmentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n        let newTitle = this.refs.titleValue.value;\n        let newDate = this.refs.dateValue.value;\n        let newTime = this.refs.timeValue.value;\n        let newLocation = this.refs.locationValue.value;\n        let newDescription = this.refs.descriptionValue.value;\n\n        if (newTitle && newDate && newTime) {\n            this.props.addItem({newTitle, newDate, newTime, newLocation, newDescription});\n            this.refs.form.reset();\n        }\n    }\n\n    render() {\n        return (\n            <form ref=\"form\" onSubmit={this.onSubmit}>\n                <div>\n                    <span className=\"appointmentKey\">* Title</span>\n                    <input type=\"text\" ref=\"titleValue\"\n                           placeholder=\"Title\"/>\n                </div>\n                <div>\n                    <span className=\"appointmentKey\">* Date</span>\n                    <input type=\"date\" ref=\"dateValue\"\n                           placeholder=\"Date\"/>\n                </div>\n                <div>\n                    <span className=\"appointmentKey\">* Time</span>\n                    <input type=\"time\" ref=\"timeValue\"\n                           placeholder=\"Time\"/>\n                </div>\n                <div>\n                    <span className=\"appointmentKey\">Location</span>\n                    <input type=\"text\" ref=\"locationValue\"\n                           placeholder=\"Location\"/>\n                </div>\n                <div>\n                    <span className=\"appointmentKey\">Description</span>\n                    <input type=\"text\" ref=\"descriptionValue\"\n                           placeholder=\"Description\"/>\n                </div>\n                <div className=\"appointmentActions\">\n                    <button type=\"submit\">add appointment</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nclass Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addAppointment = this.addAppointment.bind(this);\n        this.editAppointment = this.editAppointment.bind(this);\n        this.cancelAppointment = this.cancelAppointment.bind(this);\n        this.state = {\n            appointmentList: appointmentList\n        };\n    }\n\n    addAppointment(appointment) {\n        appointmentList.unshift({\n            id: appointmentList.length++,\n            title: appointment.newTitle,\n            date: appointment.newDate,\n            time: appointment.newTime,\n            location: appointment.newLocation,\n            description: appointment.newDescription,\n        });\n        this.setState({appointmentList: appointmentList});\n    }\n\n    editAppointment(itemId, appointment) {\n        appointmentList.splice(itemId, 1, {\n            id: itemId,\n            title: appointment.title,\n            date: appointment.date,\n            time: appointment.time,\n            location: appointment.location,\n            description: appointment.description,\n        });\n        this.setState({appointmentList: appointmentList});\n    }\n\n    cancelAppointment(itemId) {\n        appointmentList.splice(itemId, 1);\n        this.setState({appointmentList: appointmentList});\n    }\n\n    render() {\n        return (\n            <div id=\"main\">\n                <h1>Appointment Scheduler</h1>\n\n                <h2>Enter New Appointment</h2>\n                <div className=\"appointmentBlock\">\n                    <AppointmentForm addItem={this.addAppointment}/>\n                </div>\n\n                <h2>View Appointments</h2>\n                <AppointmentList items={this.props.initList}\n                                 editAppointment={this.editAppointment}\n                                 cancelAppointment={this.cancelAppointment}\n                />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Scheduler initList={appointmentList}/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}